---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Giscus from "@components/Giscus.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a: any, b: any) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a: any, b: any) => b.data.pubDate.getTime() - a.data.pubDate.getTime());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await render(post);
---

<Layout title={post.data.title} description={post.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/blog">Back to blog</BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.pubDate} />
        </div>
        &bull;
        {post.body && (
          <div class="font-base text-sm">
            {readingTime(post.body)}
          </div>
        )}
 
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
      <div class=" animate flex  justify-between items-center gap-1.5">
        {post.data.author && (
          <>
          
            <div class="font-base text-sm">
              | Written by{" "}
              {post.data.author.link ? (
                <a 
                  href={post.data.author.link}
                  class="hover:text-black dark:hover:text-white transition-colors duration-300 ease-in-out underline decoration-dotted"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {post.data.author.name}
                </a>
              ) : (
                <span>{post.data.author.name}</span>
              )}
            </div>
          </>
        )}
      
        {post.data.reviewedBy && (
          <>
           
            <div class="font-base text-sm">
              | Reviewed by{" "}
              <a 
                href={post.data.reviewedBy.link}
                class="hover:text-black dark:hover:text-white transition-colors duration-300 ease-in-out underline decoration-dotted"
                target="_blank"
                rel="noopener noreferrer"
              >
                {post.data.reviewedBy.name}
              </a>
            </div>
          </>
        )}
        </div>  
      
      <article class="prose dark:prose-invert">
        <TableOfContents headings={headings} />
        <Content />
      </article>
      <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      <div class="mt-24">
        <Giscus />
      </div>
    </div>
  </Container>
</Layout>
